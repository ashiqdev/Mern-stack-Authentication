{"id":"../../../node_modules/react-transition-group/esm/TransitionGroup.js","dependencies":[{"name":"/home/ashik/react-revisited/mern-auth/packages/client/package.json","includedInParent":true,"mtime":1599663192171},{"name":"/home/ashik/react-revisited/mern-auth/packages/client/.babelrc","includedInParent":true,"mtime":1599286422041},{"name":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/package.json","includedInParent":true,"mtime":1589369267967},{"name":"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose","loc":{"line":1,"column":42},"parent":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/esm/TransitionGroup.js","resolved":"/home/ashik/react-revisited/mern-auth/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"},{"name":"@babel/runtime/helpers/esm/extends","loc":{"line":2,"column":21},"parent":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/esm/TransitionGroup.js","resolved":"/home/ashik/react-revisited/mern-auth/node_modules/@babel/runtime/helpers/esm/extends.js"},{"name":"@babel/runtime/helpers/esm/assertThisInitialized","loc":{"line":3,"column":35},"parent":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/esm/TransitionGroup.js","resolved":"/home/ashik/react-revisited/mern-auth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"},{"name":"@babel/runtime/helpers/esm/inheritsLoose","loc":{"line":4,"column":27},"parent":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/esm/TransitionGroup.js","resolved":"/home/ashik/react-revisited/mern-auth/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"},{"name":"prop-types","loc":{"line":5,"column":22},"parent":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/esm/TransitionGroup.js","resolved":"/home/ashik/react-revisited/mern-auth/node_modules/prop-types/index.js"},{"name":"react","loc":{"line":6,"column":18},"parent":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/esm/TransitionGroup.js","resolved":"/home/ashik/react-revisited/mern-auth/node_modules/react/index.js"},{"name":"./TransitionGroupContext","loc":{"line":7,"column":35},"parent":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/esm/TransitionGroup.js","resolved":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/esm/TransitionGroupContext.js"},{"name":"./utils/ChildMapping","loc":{"line":8,"column":77},"parent":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/esm/TransitionGroup.js","resolved":"/home/ashik/react-revisited/mern-auth/node_modules/react-transition-group/esm/utils/ChildMapping.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/extends\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/inheritsLoose\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _TransitionGroupContext = _interopRequireDefault(require(\"./TransitionGroupContext\"));\n\nvar _ChildMapping = require(\"./utils/ChildMapping\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\n/**\n * The `<TransitionGroup>` component manages a set of transition components\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n * components, `<TransitionGroup>` is a state machine for managing the mounting\n * and unmounting of components over time.\n *\n * Consider the example below. As items are removed or added to the TodoList the\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual transition\n * component. This means you can mix and match animations across different list\n * items.\n */\n\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\n  (0, _inheritsLoose2.default)(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind((0, _assertThisInitialized2.default)(_this)); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  } // node is `undefined` when user provided `nodeRef` prop\n  ;\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = (0, _extends2.default)({}, state.children);\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"component\", \"childFactory\"]);\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return /*#__PURE__*/_react.default.createElement(_TransitionGroupContext.default.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return /*#__PURE__*/_react.default.createElement(_TransitionGroupContext.default.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/_react.default.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(_react.default.Component);\n\nTransitionGroup.propTypes = \"development\" !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: _propTypes.default.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: _propTypes.default.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: _propTypes.default.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: _propTypes.default.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: _propTypes.default.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nvar _default = TransitionGroup;\nexports.default = _default;"},"sourceMaps":null,"error":null,"hash":"c589f79ddbd6e111a832ddd5963b5cfd","cacheData":{"env":{"NODE_ENV":"development"}}}